From e32cc9466c31cdfeada3f42ae974a06fecd428b7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jon=C3=A1=C5=A1=20Vidra?= <vidra@ufal.mff.cuni.cz>
Date: Tue, 14 Mar 2017 17:08:17 +0100
Subject: [PATCH 2/2] Port treebank.py to new NLTK API

---
 lq-nlp-commons/treebank.py | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/lq-nlp-commons/treebank.py b/lq-nlp-commons/treebank.py
index 09c6b6f..0b325d3 100644
--- a/lq-nlp-commons/treebank.py
+++ b/lq-nlp-commons/treebank.py
@@ -20,10 +20,10 @@ class Tree(tree.Tree):
         if nltk_tree is None:
             return super(Tree, cls).__new__(cls)
         else:
-            return super(Tree, cls).__new__(cls, nltk_tree.label(), nltk_tree)
+            return super(Tree, cls).__new__(cls, nltk_tree.node, nltk_tree)
     
     def __init__(self, nltk_tree, labels=None):
-        tree.Tree.__init__(self, nltk_tree.label(), nltk_tree)
+        tree.Tree.__init__(self, nltk_tree.node, nltk_tree)
         self.labels = labels
     
     def copy(self, deep=False):
@@ -55,9 +55,9 @@ class Tree(tree.Tree):
                     st = recursion(st, f)
                     subtrees += [st]
             if subtrees == []:
-                return t.label()
+                return t.node
             else:
-                return tree.Tree(t.label(), subtrees)
+                return tree.Tree(t.node, subtrees)
         t = recursion(self, f)
         if isinstance(t, tree.Tree):
             self.__init__(t, self.labels)
-- 
2.10.2

